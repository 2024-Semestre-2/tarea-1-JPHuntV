/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package minipc;

import java.awt.Rectangle;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;


/**
 *
 * @author jeanp
 */
public class MiniPC extends javax.swing.JFrame {

    File archivo = null;
    boolean archivoValido = false;
    ArrayList<String[]> espaciosMemoria = new ArrayList<>(100);
    PC miPC = new PC();
    int posIni;
    int posActual;
    int tamMemoriaOS = 20; // inicia en 20 por defecto
    int tamMemoria = 100; //iniica en 100 por defecto
    /**
     * Creates new form MiniPC
     */
    public MiniPC() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        frameBCP = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        axInput = new javax.swing.JTextField();
        bxInput = new javax.swing.JTextField();
        cxInput = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        pcInput = new javax.swing.JTextField();
        acInput = new javax.swing.JTextField();
        irInput = new javax.swing.JTextField();
        dxInput = new javax.swing.JTextField();
        labBCP = new javax.swing.JLabel();
        labMemory = new javax.swing.JLabel();
        frameMemory = new javax.swing.JPanel();
        scrollMemory = new javax.swing.JScrollPane();
        tablaMemoria = new javax.swing.JTable();
        btnNext = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnLoad = new javax.swing.JButton();
        btnRun = new javax.swing.JButton();
        selectedFile = new javax.swing.JTextField();
        labFile = new javax.swing.JLabel();
        btnConfigMem = new javax.swing.JButton();
        distMemoria = new javax.swing.JProgressBar();
        labMemory1 = new javax.swing.JLabel();
        labMemory2 = new javax.swing.JLabel();
        disTamMemoriaOs = new javax.swing.JTextField();
        disTamMemoriaUs = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        frameBCP.setBackground(new java.awt.Color(248, 247, 249));
        frameBCP.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("AX");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("BX");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("CX");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("DX");

        axInput.setPreferredSize(new java.awt.Dimension(100, 30));
        axInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                axInputActionPerformed(evt);
            }
        });

        bxInput.setPreferredSize(new java.awt.Dimension(100, 30));

        cxInput.setPreferredSize(new java.awt.Dimension(100, 30));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("PC");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("AC");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setText("IR");

        pcInput.setPreferredSize(new java.awt.Dimension(100, 30));

        acInput.setPreferredSize(new java.awt.Dimension(100, 30));

        irInput.setPreferredSize(new java.awt.Dimension(100, 30));
        irInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                irInputActionPerformed(evt);
            }
        });

        dxInput.setPreferredSize(new java.awt.Dimension(100, 30));
        dxInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dxInputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frameBCPLayout = new javax.swing.GroupLayout(frameBCP);
        frameBCP.setLayout(frameBCPLayout);
        frameBCPLayout.setHorizontalGroup(
            frameBCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frameBCPLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(frameBCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5))
                .addGap(29, 29, 29)
                .addGroup(frameBCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frameBCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(pcInput, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(acInput, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(irInput, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(axInput, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(bxInput, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cxInput, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dxInput, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );
        frameBCPLayout.setVerticalGroup(
            frameBCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameBCPLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(frameBCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addComponent(pcInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(frameBCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel6)
                    .addComponent(acInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(frameBCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel7)
                    .addComponent(irInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(frameBCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(axInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(frameBCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2)
                    .addComponent(bxInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(frameBCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cxInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(frameBCPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(dxInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        labBCP.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labBCP.setText("Procesador");

        labMemory.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labMemory.setText("Memoria");

        frameMemory.setBackground(new java.awt.Color(248, 247, 249));
        frameMemory.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tablaMemoria.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        tablaMemoria.setForeground(new java.awt.Color(0, 0, 0));
        tablaMemoria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {"", null, null},
                {"", null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "", "asm", "bin"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaMemoria.setRowHeight(30);
        tablaMemoria.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        tablaMemoria.getTableHeader().setReorderingAllowed(false);
        scrollMemory.setViewportView(tablaMemoria);

        btnNext.setText("Siguiente");
        btnNext.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnNext.setBorderPainted(false);
        btnNext.setPreferredSize(new java.awt.Dimension(100, 30));
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnClear.setText("Limpiar");
        btnClear.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnClear.setBorderPainted(false);
        btnClear.setPreferredSize(new java.awt.Dimension(100, 30));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frameMemoryLayout = new javax.swing.GroupLayout(frameMemory);
        frameMemory.setLayout(frameMemoryLayout);
        frameMemoryLayout.setHorizontalGroup(
            frameMemoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameMemoryLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(scrollMemory)
        );
        frameMemoryLayout.setVerticalGroup(
            frameMemoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameMemoryLayout.createSequentialGroup()
                .addComponent(scrollMemory, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frameMemoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9))
        );

        btnLoad.setText("Cargar");
        btnLoad.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnLoad.setBorderPainted(false);
        btnLoad.setPreferredSize(new java.awt.Dimension(100, 30));
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        btnRun.setText("Ejecutar");
        btnRun.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnRun.setBorderPainted(false);
        btnRun.setPreferredSize(new java.awt.Dimension(100, 30));
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });

        selectedFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedFileActionPerformed(evt);
            }
        });

        labFile.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labFile.setText("Archivo");

        btnConfigMem.setText("Configurar");
        btnConfigMem.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnConfigMem.setBorderPainted(false);
        btnConfigMem.setPreferredSize(new java.awt.Dimension(100, 30));
        btnConfigMem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfigMemActionPerformed(evt);
            }
        });

        distMemoria.setValue(20);

        labMemory1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labMemory1.setText("O.S");

        labMemory2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labMemory2.setText("Usuario");

        disTamMemoriaOs.setEditable(false);
        disTamMemoriaOs.setText("20");
        disTamMemoriaOs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disTamMemoriaOsActionPerformed(evt);
            }
        });

        disTamMemoriaUs.setEditable(false);
        disTamMemoriaUs.setText("60");
        disTamMemoriaUs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disTamMemoriaUsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(labMemory)
                        .addGap(50, 50, 50)
                        .addComponent(labMemory1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(disTamMemoriaOs, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(distMemoria, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labMemory2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(disTamMemoriaUs, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(btnConfigMem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(labFile)
                        .addGap(18, 18, 18)
                        .addComponent(selectedFile))
                    .addComponent(frameMemory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(btnLoad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(btnRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(frameBCP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(60, 60, 60))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labBCP)
                        .addGap(126, 126, 126))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labFile)
                    .addComponent(selectedFile, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLoad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(labMemory)
                    .addComponent(labMemory1)
                    .addComponent(disTamMemoriaOs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(distMemoria, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labMemory2)
                    .addComponent(disTamMemoriaUs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConfigMem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labBCP))
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(frameMemory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(frameBCP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(60, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    //Crea un dialogo con el mensaje indicado
    public static void mostrarError(String mensaje){
        JOptionPane.showMessageDialog(null, mensaje);
       
    }
    
    private void botSiguienteActionPerformed(java.awt.event.ActionEvent evt) {                                             

        if(miPC.getInstruccionesbin() == null){//si no se ha seleccionado archivo
            JOptionPane.showMessageDialog(null, "Seleccione un archivo primero");
        }else{
            if(posActual-posIni<miPC.getInstruccionesbin().size()){//mientras que la cantidad de 
                ejecutarInstruccion();                                  //posiciones recorrida se menor que el total de instrucciones
            } else{
                JOptionPane.showMessageDialog(null, "Se han ejecutado todas las instrucciones");
            }
        }  
    }                                            

    //Solicita a miPc la ejecucion de la instruccion
    private void ejecutarInstruccion(){
        String instruccion = tablaMemoria.getValueAt(posActual, 2).toString();
            String[] elementos = instruccion.split(" ");
            String valorAR =Integer.toString(Integer.parseInt(elementos[0],2))
                    + Integer.toString(Integer.parseInt(elementos[1],2))
                    + Integer.toString(Integer.parseInt(elementos[2].substring(1),2));
            irInput.setText(valorAR);
            tablaMemoria.removeRowSelectionInterval(posActual-1, posActual-1);
            tablaMemoria.addRowSelectionInterval(posActual, posActual);
            posActual++;
            if(elementos[0].equals("0011")){//mov
                miPC.ejecutarMov(elementos[1],elementos[2]);
                actualizarInput(elementos[1]);
            }else if(elementos[0].equals("0001")){//LOAD
                miPC.ejecutarLoad(elementos[1]);
                actualizarInput("AC");
            }else if(elementos[0].equals("0101")){//ADD
                miPC.ejecutarAdd(elementos[1]);
                actualizarInput("AC");
            }else if(elementos[0].equals("0100")){//ADD
                miPC.ejecutarSub(elementos[1]);
                actualizarInput("AC");
            }else if(elementos[0].equals("0010")){//ADD
                miPC.ejecutarStore(elementos[1]);
                actualizarInput(elementos[1]);
            }
            pcInput.setText(Integer.toString(posActual));          
            //System.out.println("Largo: "+miPC.getInstruccionesbin().size()+" actual: "+ (posActual-posIni) );
    }
    
    //Luego de la ejecución de la instrucción actualiza la interfaz grafica
    private void actualizarInput(String registro) {
        if (registro.equals("0001")) {//ax
            axInput.setText(Integer.toString(
                    miPC.getRegistros().get(registro).getValor()));
        } else if (registro.equals("0010")) {//bx
            bxInput.setText(Integer.toString(
                    miPC.getRegistros().get(registro).getValor()));
        } else if (registro.equals("0011")) {//cx
            cxInput.setText(Integer.toString(
                    miPC.getRegistros().get(registro).getValor()));
        } else if (registro.equals("0100")) {//dx
            dxInput.setText(Integer.toString(
                    miPC.getRegistros().get(registro).getValor()));
        } else if (registro.equals("AC")) {//ac
            acInput.setText(Integer.toString(
                    miPC.getRegistros().get(registro).getValor()));
        }
    }
    
     
    private void axInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_axInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_axInputActionPerformed

    private void irInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_irInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_irInputActionPerformed

    private void dxInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dxInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dxInputActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed

        if(miPC.getInstruccionesbin() == null){//si no se ha seleccionado archivo
            JOptionPane.showMessageDialog(null, "Seleccione un archivo primero");
        }else{
            if(posActual-posIni<miPC.getInstruccionesbin().size()){//mientras que la cantidad de
                ejecutarInstruccion();                                  //posiciones recorrida se menor que el total de instrucciones
            } else{
                JOptionPane.showMessageDialog(null, "Se han ejecutado todas las instrucciones");
            }
        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i < tamMemoria; i++) {
            tablaMemoria.setValueAt(null, i, 1);
            tablaMemoria.setValueAt(null, i, 2);
        }
        pcInput.setText("");
        acInput.setText("");
        irInput.setText("");
        axInput.setText("");
        bxInput.setText("");
        cxInput.setText("");
        dxInput.setText("");
        selectedFile.setText("");
        btnConfigMem.enable();
        btnRun.enable();

    }//GEN-LAST:event_btnClearActionPerformed

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        archivoValido = false;
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        archivo = chooser.getSelectedFile();
        String nombreArchivo = archivo.getAbsolutePath();
        selectedFile.setText(nombreArchivo);

        try {
            miPC.setInstruccionesASM(Verifier.validarArchivo(nombreArchivo));
            if(miPC.getInstruccionesASM() == null){
                archivoValido = true;
            }
        } catch (IOException ex) {
            Logger.getLogger(MiniPC.class.getName()).log(Level.SEVERE, null, ex);
        }
        
     
    }//GEN-LAST:event_btnLoadActionPerformed

    private void btnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunActionPerformed
        // TODO add your handling code here:
        ArrayList<String[]> instruccionesASM = miPC.getInstruccionesASM();
        ArrayList<String[]> instruccionesbin = miPC.getInstruccionesbin() ;
        if(instruccionesASM == null){
            JOptionPane.showMessageDialog(null, "Seleccione un archivo primero");
        }else{
            instruccionesbin = Verifier.transformarBinario(instruccionesASM);
            int largo = Arrays.asList(instruccionesASM.toArray()).size();
            posIni = Verifier.escogerPosicion(largo, tamMemoriaOS, tamMemoria);
            posActual = posIni;
            int j = 0;
            for (int i = posIni; j < largo; i++) {
                String instruccionASM = instruccionesASM.get(j)[0]+" "+instruccionesASM.get(j)[1];
                String instruccionBin = instruccionesbin.get(j)[0]+" "+instruccionesbin.get(j)[1]+" "+instruccionesbin.get(j)[2];
                if(instruccionesASM.get(j).length == 3) instruccionASM += " "+instruccionesASM.get(j)[2];
                tablaMemoria.setValueAt( instruccionASM, i, 1);
                tablaMemoria.setValueAt( instruccionBin, i, 2);
                j++;
            }

            //tablaMemoria.addRowSelectionInterval(posIni, posIni);
            pcInput.setText(Integer.toString(posIni));
            tablaMemoria.scrollRectToVisible(new Rectangle(tablaMemoria.getCellRect(posIni+9, 0, true)));
            btnConfigMem.disable();
            btnRun.disable();
        }
        miPC.setInstruccionesASM(instruccionesASM);
        miPC.setInstruccionesbin(instruccionesbin);
    }//GEN-LAST:event_btnRunActionPerformed

    private void selectedFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectedFileActionPerformed

    private void btnConfigMemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfigMemActionPerformed
        // TODO add your handling code here:
        MemoryConfig ventanaMemoria = new MemoryConfig(this);
        ventanaMemoria.show(true);
    }//GEN-LAST:event_btnConfigMemActionPerformed

    private void disTamMemoriaOsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disTamMemoriaOsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_disTamMemoriaOsActionPerformed

    private void disTamMemoriaUsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disTamMemoriaUsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_disTamMemoriaUsActionPerformed

    public int getTamMemoriaOS() {
        return tamMemoriaOS;
    }

    public int getTamMemoria() {
        return tamMemoria;
    }

    public void setTamMemoriaOS(int tamMemoriaOS) {
        this.tamMemoriaOS = tamMemoriaOS;
        distMemoria.setValue(tamMemoriaOS);
        disTamMemoriaOs.setText(Integer.toString(tamMemoriaOS));
        disTamMemoriaUs.setText(Integer.toString(tamMemoria-tamMemoriaOS));
    }

    public void setTamMemoria(int tamMemoria) {
        this.tamMemoria = tamMemoria;
        distMemoria.setMaximum(tamMemoria);
        espaciosMemoria = new ArrayList<>(tamMemoria);
        tablaMemoria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [tamMemoria][3],
            new String [] {
                "", "asm", "bin"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        disTamMemoriaUs.setText(Integer.toString(tamMemoria-tamMemoriaOS));
      
        for (int i = 0; i < tamMemoria; i++) {
            tablaMemoria.setValueAt(i, i, 0);
        }



    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MiniPC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MiniPC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MiniPC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MiniPC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MiniPC().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField acInput;
    private javax.swing.JTextField axInput;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnConfigMem;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnRun;
    private javax.swing.JTextField bxInput;
    private javax.swing.JTextField cxInput;
    private javax.swing.JTextField disTamMemoriaOs;
    private javax.swing.JTextField disTamMemoriaUs;
    private javax.swing.JProgressBar distMemoria;
    private javax.swing.JTextField dxInput;
    private javax.swing.JPanel frameBCP;
    private javax.swing.JPanel frameMemory;
    private javax.swing.JTextField irInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel labBCP;
    private javax.swing.JLabel labFile;
    private javax.swing.JLabel labMemory;
    private javax.swing.JLabel labMemory1;
    private javax.swing.JLabel labMemory2;
    private javax.swing.JTextField pcInput;
    private javax.swing.JScrollPane scrollMemory;
    private javax.swing.JTextField selectedFile;
    private javax.swing.JTable tablaMemoria;
    // End of variables declaration//GEN-END:variables
}
